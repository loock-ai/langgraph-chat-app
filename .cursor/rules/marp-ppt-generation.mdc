---
description: 为课程章节README文件生成Marp格式PPT的规则
---

# Marp PPT生成规则

## 文件处理规范

### 输入文件
- 读取目标小节目录下的 `README.md` 文件
- 解析文件内容，提取核心教学要点

### 输出文件
- **文件命名格式**：`[小节名称].ppt.md`
- **存放位置**：对应小节目录下
- **示例**：`docs/course/第1章-概念入门/1.1-AI应用开发基础/1.1-AI应用开发基础.ppt.md`

## Marp语法配置

### 必需的文件头部
```yaml
---
marp: true
theme: gaia
paginate: true
header: '[小节名称]'
style: |
  section {
    font-size: 30px;
  }
---
```

### 主题和样式设置
- **主题选择**：使用 `theme: gaia` 提供更美观的视觉效果
- **字体大小**：设置为30px，确保内容清晰易读
- **页头内容**：显示小节名称（如：1.1-AI应用开发基础）
- **页头格式**：在Marp配置中使用 `header: '[小节名称]'`
- **页头样式**：自动显示在每页顶部，保持统一性
- **自定义样式**：通过style配置块进行字体大小等样式调整

### 特殊页面样式
- 封面页使用：`<!-- _class: lead -->`
- 普通内容页使用默认样式

## PPT内容架构

### 1. 封面页面
```markdown
<!-- _class: lead -->
# [章节标题] [emoji]

## [副标题描述]

**[课程系列名称]**
```

**注意**：封面页也会显示页头，确保小节名称在配置中正确设置

### 2. 目标概述页
- 学习目标列表
- 核心价值说明
- 前后章节关联

### 3. 核心概念页面
- 每个主要概念独立成页
- 使用生动比喻和实例
- 包含技术细节和代码示例

### 4. 应用场景页面
- 实际应用案例
- 技术实现要点
- 最佳实践建议

### 5. 总结页面
- 知识要点回顾
- 学习成果检验
- 下节课预告

## 格式和样式规范

### Emoji使用指南
- 🎯 学习目标
- 📚 核心概念  
- 🏗️ 架构设计
- 🔗 API和连接
- 💡 技术要点
- 🌟 应用场景
- 📋 总结要点
- 🔮 趋势展望

### 文本格式
- **一级标题**：`# 标题 emoji`
- **二级标题**：`## 副标题`
- **重点内容**：使用加粗 `**文本**`
- **代码片段**：只展示关键代码，避免大段代码块

### 代码展示原则
- **精简原则**：只显示关键的3-5行核心代码
- **突出重点**：使用注释标注重要部分
- **分页处理**：复杂代码拆分到多页展示
- **伪代码优先**：复杂逻辑用伪代码描述
- **示例格式**：
```javascript
// 关键API调用示例
const response = await openai.chat.completions.create({
  model: "gpt-3.5-turbo",
  messages: [...] // 消息数组
});
```

### 列表格式
- 使用 `-` 或数字列表
- 每个要点简洁明了
- 适当使用子列表增加层次

## 内容转换原则

### 教学适配
- 将复杂概念转化为易懂的比喻
- 保持技术准确性
- 突出实践应用价值
- 增加互动思考元素

### 视觉优化
- 每页内容控制在合理范围
- 适当使用空白和分割线
- 代码示例简洁美观，避免页面拥挤
- 图表和表格简洁明了
- 长内容分页展示，保持页面清爽

### 逻辑结构
- 遵循从概念到应用的逻辑
- 保持章节间的连贯性
- 提供清晰的学习路径

## 质量控制标准

### 内容质量
- 教学目标明确
- 知识点覆盖完整
- 实例生动具体
- 技术细节准确

### 格式质量  
- Marp语法正确
- 样式统一美观
- 页头显示小节名称，保持一致性
- 页面布局合理简洁
- 代码展示精炼，不影响整体美观
- 导航清晰流畅

### 代码处理标准
- **避免超过5行的代码块**
- **优先使用配置示例、关键函数调用**
- **完整代码用"..."省略非关键部分**
- **复杂逻辑用流程图或步骤说明代替**
- **API示例只展示核心参数和返回值**

### 教学效果
- 适合目标学习者
- 理论实践结合
- 激发学习兴趣
- 便于知识消化